name: Deploy Backend and Frontend

run-name: ${{ github.actor }} is deploying the math2 app - ${{ github.run_number }}

on: [push]

jobs:
  deploy-all:
    runs-on: ubuntu-latest
    environment: deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: List files
        run: cd backend && ls -la

      - name: Init .env file
        run: |
          echo "DJANGO_ENV=prod" > backend/${{ secrets.DJANGO_APP_NAME }}/.env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> backend/${{ secrets.DJANGO_APP_NAME }}/.env
          echo "DJANGO_DB_USER=${{ secrets.DB_USER }}" >> backend/${{ secrets.DJANGO_APP_NAME }}/.env
          echo "DJANGO_DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> backend/${{ secrets.DJANGO_APP_NAME }}/.env
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> backend/${{ secrets.DJANGO_APP_NAME }}/.env
          echo "DJANGO_SUPERUSER_USERNAME=${{ secrets.DJANGO_SUPERUSER_USERNAME }}" >> backend/${{ secrets.DJANGO_APP_NAME }}/.env
          echo "DJANGO_SUPERUSER_EMAIL=${{ secrets.DJANGO_SUPERUSER_EMAIL }}" >> backend/${{ secrets.DJANGO_APP_NAME }}/.env
          echo "DJANGO_SUPERUSER_PASSWORD=${{ secrets.DJANGO_SUPERUSER_PASSWORD }}" >> backend/${{ secrets.DJANGO_APP_NAME }}/.env

      - name: Initialize "Create Django superuser" script
        run: |
          echo '
          import os
          import environ

          env = environ.Env()
          environ.Env.read_env()

          from django.contrib.auth import get_user_model

          User = get_user_model()

          username = env("DJANGO_SUPERUSER_USERNAME")
          email = env("DJANGO_SUPERUSER_EMAIL")
          password = env("DJANGO_SUPERUSER_PASSWORD")

          if not User.objects.filter(username=username).exists():
              User.objects.create_superuser(username, email, password)
          ' > backend/create_superuser.py

      - name: Deploy backend to remote host
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.HOST }}
          REMOTE_USER: ${{ secrets.USER }}
          SOURCE: backend/
          TARGET: ${{ secrets.CODE_DIRECTORY }}/backend
          SCRIPT_BEFORE_REQUIRED: true
          SCRIPT_AFTER_REQUIRED: true
          SCRIPT_BEFORE: |
            sudo apt-get update
            sudo apt-get install -y python3 python3-venv python3-pkgconfig python3-dev mysql-server mysql-client gcc gettext
            source .profile
            rm -rf ${{ secrets.CODE_DIRECTORY }}/backend/*
            mkdir -p /opt/deployments/${{ secrets.BACKEND_APP_NAME }}
            [ -d /opt/deployments/${BACKEND_APP_NAME}/.venv ] || python3 -m venv /opt/deployments/${{ secrets.BACKEND_APP_NAME }}/.venv
            mysql --login-path=${MYSQL_LOGIN_PATH} -e "CREATE DATABASE IF NOT EXISTS ${{ secrets.DB_NAME }}"
            mysql --login-path=${MYSQL_LOGIN_PATH} -e "CREATE USER IF NOT EXISTS '${{ secrets.DB_USER }}'@'localhost' IDENTIFIED BY '${{ secrets.DB_PASSWORD }}'"
            mysql --login-path=${MYSQL_LOGIN_PATH} -e "GRANT ALL PRIVILEGES ON ${{ secrets.DB_NAME }}.* TO '${{ secrets.DB_USER }}'@'localhost'"
          SCRIPT_AFTER: |
            source .profile
            cp -r ${{ secrets.CODE_DIRECTORY }}/backend/* /opt/deployments/${BACKEND_APP_NAME}
            /opt/deployments/${{ secrets.BACKEND_APP_NAME }}/.venv/bin/pip install -r /opt/deployments/${{ secrets.BACKEND_APP_NAME }}/requirements.txt
            /opt/deployments/${{ secrets.BACKEND_APP_NAME }}/.venv/bin/python /opt/deployments/${{ secrets.BACKEND_APP_NAME }}/manage.py migrate
            /opt/deployments/${{ secrets.BACKEND_APP_NAME }}/.venv/bin/python /opt/deployments/${{ secrets.BACKEND_APP_NAME }}/manage.py collectstatic --noinput --settings=${{ secrets.DJANGO_APP_NAME }}.settings_prod
            mkdir -p /opt/deployments/${{ secrets.BACKEND_APP_NAME }}/static
            /opt/deployments/${{ secrets.BACKEND_APP_NAME }}/.venv/bin/python /opt/deployments/${{ secrets.BACKEND_APP_NAME }}/manage.py compilemessages --ignore=.venv
            sudo systemctl restart gunicorn
            /opt/deployments/${{ secrets.BACKEND_APP_NAME }}/.venv/bin/python /opt/deployments/${{ secrets.BACKEND_APP_NAME }}/manage.py shell < /opt/deployments/${{ secrets.BACKEND_APP_NAME }}/create_superuser.py
            /opt/deployments/${{ secrets.BACKEND_APP_NAME }}/.venv/bin/python /opt/deployments/${{ secrets.BACKEND_APP_NAME }}/manage.py initialize_db

      - name: Deploy frontend to remote host
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.HOST }}
          REMOTE_USER: ${{ secrets.USER }}
          SOURCE: frontend/
          TARGET: ${{ secrets.CODE_DIRECTORY }}/frontend
          SCRIPT_BEFORE_REQUIRED: true
          SCRIPT_AFTER_REQUIRED: true
          SCRIPT_BEFORE: |
            source .profile
            sudo apt-get update
            sudo apt-get install -y ca-certificates
            sudo mkdir -p /etc/apt/keyrings
            curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --batch --yes --dearmor -o /etc/apt/keyrings/nodesource.gpg
            echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_18.x nodistro main" | sudo tee /etc/apt/sources.list.d/nodesource.list
            sudo apt-get update
            sudo apt-get install -y nodejs
            mkdir -p /opt/deployments/${{ secrets.FRONTEND_APP_NAME }}
            rm -rf ${{ secrets.CODE_DIRECTORY }}/frontend/*
          SCRIPT_AFTER: |
            source .profile
            rm -rf /opt/deployments/${{ secrets.FRONTEND_APP_NAME }}/*
            cp -r ${{ secrets.CODE_DIRECTORY }}/frontend/* /opt/deployments/${{ secrets.FRONTEND_APP_NAME }}
            npm install --prefix /opt/deployments/${{ secrets.FRONTEND_APP_NAME }}
            npm run build --prefix /opt/deployments/${{ secrets.FRONTEND_APP_NAME }}
            npm install -g pm2 --prefix ~/.local
            cd /opt/deployments/${{ secrets.FRONTEND_APP_NAME }}
            (pm2 describe ${{ secrets.FRONTEND_APP_NAME }} > /dev/null 2>&1 || pm2 start npm --name ${{ secrets.FRONTEND_APP_NAME }} -- run start -- -p ${{ secrets.FRONTEND_APP_PORT }})
            pm2 restart ${{ secrets.FRONTEND_APP_NAME }}
