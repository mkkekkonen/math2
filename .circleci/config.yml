version: 2.1
jobs:
  deploy-backend:
    # requirements:
    # - environment variables on the remote host:
    #   - GITHUB_SSH_KEY: the name of the SSH key file in the .ssh directory
    #   - CODE_DIRECTORY: the directory where the code will be checked out
    #   - REPO: the URL of the repository to be checked out
    #   - MYSQL_LOGIN_PATH: the name of the MySQL login path
    #   - DB_NAME: the name of the database to be created
    #   - DJANGO_DB_USER: the name of the Django database user
    #   - DJANGO_DB_PASSWORD: the password of the Django database user
    # - a MySQL admin user with password (able to create databases and users)
    # - a MySQL login path with the credentials for the MySQL user
    # - a working Apache instance on the remote host
    # - an Apache alias for the static files directory
    docker:
      - image: ubuntu:22.04
    steps:
      - add_ssh_keys:
          fingerprints:
            - "0d:71:f6:fe:2e:58:1a:9b:65:68:bc:9c:40:a2:49:03"
            - "af:ee:bd:e7:30:b5:72:ac:84:49:b7:d3:fa:e8:e1:a8"
      - run:
          name: Install packages required by deployment
          command: apt-get update && apt-get install -y openssh-client
      - run:
          name: Add host to known hosts
          command: ssh-keyscan ${HOST} >> ~/.ssh/known_hosts
      - run:
          name: Update packages
          command: ssh ${USER}@${HOST} 'sudo apt-get update' 2>&1
          no_output_timeout: 3m
      - run:
          name: Install required packages
          command: ssh ${USER}@${HOST} 'sudo apt-get install -y python3 python3-venv mysql-server mysql-client' 2>&1
      - run:
          name: Create deployment directory
          command: ssh ${USER}@${HOST} 'source .profile && mkdir -p /opt/deployments/${BACKEND_APP_NAME}'
      - run:
          name: Create virtualenv
          command: ssh ${USER}@${HOST} 'source .profile && [ -d /opt/deployments/${BACKEND_APP_NAME}/.venv ] || python3 -m venv /opt/deployments/${BACKEND_APP_NAME}/.venv'
      - run:
          name: Checkout code
          command: ssh ${USER}@${HOST} 'source .profile && eval `ssh-agent -s` && ssh-add ./.ssh/${GITHUB_SSH_KEY} && rm -rf ${CODE_DIRECTORY} && git clone ${REPO} ${CODE_DIRECTORY}'
      - run:
          name: Create MySQL database and Django user
          command: |
            ssh ${USER}@${HOST} 'source .profile && mysql --login-path=${MYSQL_LOGIN_PATH} -e "CREATE DATABASE IF NOT EXISTS ${DB_NAME}"'
            ssh ${USER}@${HOST} 'source .profile && mysql --login-path=${MYSQL_LOGIN_PATH} -e "CREATE USER IF NOT EXISTS ${DJANGO_DB_USER}@localhost IDENTIFIED BY \"${DJANGO_DB_PASSWORD}\""'
            ssh ${USER}@${HOST} 'source .profile && mysql --login-path=${MYSQL_LOGIN_PATH} -e "GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO ${DJANGO_DB_USER}@localhost"'
      - run:
          name: Copy backend app files to deployment directory
          command: ssh ${USER}@${HOST} 'source .profile && cp -r ${CODE_DIRECTORY}/backend/* /opt/deployments/${BACKEND_APP_NAME}'
      - run:
          name: Install backend app requirements
          command: ssh ${USER}@${HOST} 'source .profile && /opt/deployments/${BACKEND_APP_NAME}/.venv/bin/pip install -r /opt/deployments/${BACKEND_APP_NAME}/requirements.txt'

workflows:
  version: 2
  deploy:
    jobs:
      - deploy-backend
