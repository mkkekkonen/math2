version: 2.1

executors:
  default-executor:
    docker:
      - image: ubuntu:22.04
    working_directory: /tmp

jobs:
  init-workspace:
    executor: default-executor
    steps:
      - run:
          name: Create workspace
          command: mkdir workspace
      - run:
          name: Init Django .env file
          command: |
            echo "DJANGO_ENV=prod" > workspace/.env
            echo "DB_NAME=${DB_NAME}" >> workspace/.env
            echo "DJANGO_DB_USER=${DJANGO_DB_USER}" >> workspace/.env
            echo "DJANGO_DB_PASSWORD=${DJANGO_DB_PASSWORD}" >> workspace/.env
            echo "DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}" >> workspace/.env
            echo "DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME}" >> workspace/.env
            echo "DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}" >> workspace/.env
            echo "DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}" >> workspace/.env
      - run:
          name: Init "Create Django superuser" script
          command: |
            echo '
            import os
            import environ

            env = environ.Env()
            environ.Env.read_env()

            from django.contrib.auth import get_user_model

            User = get_user_model()

            username = env("DJANGO_SUPERUSER_USERNAME")
            email = env("DJANGO_SUPERUSER_EMAIL")
            password = env("DJANGO_SUPERUSER_PASSWORD")

            if not User.objects.filter(username=username).exists():
                User.objects.create_superuser(username, email, password)
            ' > workspace/create_superuser.py
      - persist_to_workspace:
          root: workspace
          paths:
            - .env
            - create_superuser.py

  deploy-backend:
    # requirements:
    # - environment variables on the remote host:
    #   - GITHUB_SSH_KEY: the name of the SSH key file in the .ssh directory
    #   - CODE_DIRECTORY: the directory where the code will be checked out
    #   - REPO: the URL of the repository to be checked out
    #   - MYSQL_LOGIN_PATH: the name of the MySQL login path
    #   - DB_NAME: the name of the database to be created
    #   - DJANGO_DB_USER: the name of the Django database user
    #   - DJANGO_DB_PASSWORD: the password of the Django database user
    # - a MySQL admin user with password (able to create databases and users)
    # - a MySQL login path with the credentials for the MySQL user
    # - a working Apache instance on the remote host
    # - Apache configuration for the backend app
    # - an Apache alias for the static files directory
    # - a Gunicorn systemd service file
    # - sudo privileges for the user for apt-get and `systemctl restart gunicorn`
    executor: default-executor
    steps:
      - add_ssh_keys:
          fingerprints:
            - "0d:71:f6:fe:2e:58:1a:9b:65:68:bc:9c:40:a2:49:03"
            - "af:ee:bd:e7:30:b5:72:ac:84:49:b7:d3:fa:e8:e1:a8"
      - run:
          name: Install packages required by deployment
          command: apt-get update && apt-get install -y openssh-client
      - run:
          name: Add host to known hosts
          command: ssh-keyscan ${HOST} >> ~/.ssh/known_hosts
      - run:
          name: Update packages
          command: ssh ${USER}@${HOST} 'sudo apt-get update' 2>&1
          no_output_timeout: 3m
      - run:
          name: Install required packages
          command: ssh ${USER}@${HOST} 'sudo apt-get install -y python3 python3-venv python3-pkgconfig python3-dev mysql-server mysql-client gcc gettext' 2>&1
      - run:
          name: Create deployment directory
          command: ssh ${USER}@${HOST} 'source .profile && mkdir -p /opt/deployments/${BACKEND_APP_NAME}'
      - run:
          name: Create virtualenv
          command: ssh ${USER}@${HOST} 'source .profile && [ -d /opt/deployments/${BACKEND_APP_NAME}/.venv ] || python3 -m venv /opt/deployments/${BACKEND_APP_NAME}/.venv'
      - run:
          name: Checkout code
          command: ssh ${USER}@${HOST} 'source .profile && eval `ssh-agent -s` && ssh-add ./.ssh/${GITHUB_SSH_KEY} && rm -rf ${CODE_DIRECTORY} && git clone -b ' ${CIRCLE_BRANCH} ' ${REPO} ${CODE_DIRECTORY}'
      - run:
          name: Create MySQL database and Django user
          command: |
            ssh ${USER}@${HOST} 'source .profile && mysql --login-path=${MYSQL_LOGIN_PATH} -e "CREATE DATABASE IF NOT EXISTS ${DB_NAME}"'
            ssh ${USER}@${HOST} 'source .profile && mysql --login-path=${MYSQL_LOGIN_PATH} -e "CREATE USER IF NOT EXISTS ${DJANGO_DB_USER}@localhost IDENTIFIED BY \"${DJANGO_DB_PASSWORD}\""'
            ssh ${USER}@${HOST} 'source .profile && mysql --login-path=${MYSQL_LOGIN_PATH} -e "GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO ${DJANGO_DB_USER}@localhost"'
      - run:
          name: Copy backend app files to deployment directory
          command: ssh ${USER}@${HOST} 'source .profile && cp -r ${CODE_DIRECTORY}/backend/* /opt/deployments/${BACKEND_APP_NAME}'
      - run:
          name: Install backend app requirements
          command: ssh ${USER}@${HOST} 'source .profile && /opt/deployments/${BACKEND_APP_NAME}/.venv/bin/pip install -r /opt/deployments/${BACKEND_APP_NAME}/requirements.txt'
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Upload Django .env file
          command: scp /tmp/workspace/.env ${USER}@${HOST}:/opt/deployments/${BACKEND_APP_NAME}/${DJANGO_APP_NAME}/
      - run:
          name: Run Django migrations
          command: ssh ${USER}@${HOST} 'source .profile && /opt/deployments/${BACKEND_APP_NAME}/.venv/bin/python /opt/deployments/${BACKEND_APP_NAME}/manage.py migrate'
      - run:
          name: Collect static files
          command: ssh ${USER}@${HOST} 'source .profile && mkdir -p /opt/deployments/mathbackend/static && /opt/deployments/${BACKEND_APP_NAME}/.venv/bin/python /opt/deployments/${BACKEND_APP_NAME}/manage.py collectstatic --noinput --settings=${DJANGO_APP_NAME}.settings_prod'
      - run:
          name: Compile translations
          command: ssh ${USER}@${HOST} 'source .profile && /opt/deployments/${BACKEND_APP_NAME}/.venv/bin/python /opt/deployments/${BACKEND_APP_NAME}/manage.py compilemessages'
      - run:
          name: Restart Gunicorn
          command: ssh ${USER}@${HOST} 'source .profile && sudo systemctl restart gunicorn'
      - run:
          name: Upload "Create Django superuser" script
          command: scp /tmp/workspace/create_superuser.py ${USER}@${HOST}:/opt/deployments/${BACKEND_APP_NAME}/
      - run:
          name: Run "Create Django superuser" script
          command: ssh ${USER}@${HOST} 'source .profile && /opt/deployments/${BACKEND_APP_NAME}/.venv/bin/python /opt/deployments/${BACKEND_APP_NAME}/manage.py shell < /opt/deployments/${BACKEND_APP_NAME}/create_superuser.py'
      - run:
          name: Run Django post-deployment task
          command: ssh ${USER}@${HOST} 'source .profile && /opt/deployments/${BACKEND_APP_NAME}/.venv/bin/python /opt/deployments/${BACKEND_APP_NAME}/manage.py initialize_db'

  deploy-frontend:
    executor: default-executor
    steps:
      - add_ssh_keys:
          fingerprints:
            - "0d:71:f6:fe:2e:58:1a:9b:65:68:bc:9c:40:a2:49:03"
            - "af:ee:bd:e7:30:b5:72:ac:84:49:b7:d3:fa:e8:e1:a8"
      - run:
          name: Install packages required by deployment
          command: apt-get update && apt-get install -y openssh-client
      - run:
          name: Add host to known hosts
          command: ssh-keyscan ${HOST} >> ~/.ssh/known_hosts
      - run:
          name: Update packages
          command: ssh ${USER}@${HOST} 'sudo apt-get update' 2>&1
          no_output_timeout: 3m
      - run:
          name: Install required packages
          command: ssh ${USER}@${HOST} 'sudo apt-get install -y ca-certificates' 2>&1
      - run:
          name: Download and import Nodesouce GPG key
          command: ssh ${USER}@${HOST} 'sudo mkdir -p /etc/apt/keyrings; curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --batch --yes --dearmor -o /etc/apt/keyrings/nodesource.gpg' 2>&1
      - run:
          name: Add Nodesource repository
          command: ssh ${USER}@${HOST} 'echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_18.x nodistro main" | sudo tee /etc/apt/sources.list.d/nodesource.list' 2>&1
      - run:
          name: Install Node.js
          command: ssh ${USER}@${HOST} 'sudo apt-get update && sudo apt-get install -y nodejs' 2>&1
      - run:
          name: Checkout code
          command: ssh ${USER}@${HOST} 'source .profile && eval `ssh-agent -s` && ssh-add ./.ssh/${GITHUB_SSH_KEY} && rm -rf ${CODE_DIRECTORY} && git clone -b ' ${CIRCLE_BRANCH} ' ${REPO} ${CODE_DIRECTORY}'
      - run:
          name: Create deployment directory
          command: ssh ${USER}@${HOST} 'source .profile && mkdir -p /opt/deployments/${FRONTEND_APP_NAME}'
      - run:
          name: Copy frontend app files to deployment directory
          command: ssh ${USER}@${HOST} 'source .profile && cp -r ${CODE_DIRECTORY}/frontend/* /opt/deployments/${FRONTEND_APP_NAME}'
      - run:
          name: Install frontend app dependencies
          command: ssh ${USER}@${HOST} 'source .profile && cd /opt/deployments/${FRONTEND_APP_NAME} && npm install'
      - run:
          name: Build frontend app
          command: ssh ${USER}@${HOST} 'source .profile && cd /opt/deployments/${FRONTEND_APP_NAME} && npm run build'
      - run:
          name: Configure global NPM packages and install PM2
          command: ssh ${USER}@${HOST} 'source .profile && npm config set prefix ~/.local && npm install -g pm2'
      - run:
          name: Start frontend app
          command: ssh ${USER}@${HOST} 'source .profile && cd /opt/deployments/${FRONTEND_APP_NAME} && (pm2 describe ${FRONTEND_APP_NAME} > /dev/null 2>&1 || pm2 start npm --name ${FRONTEND_APP_NAME} -- run start -- -p ${FRONTEND_APP_PORT})' 2>&1
      - run:
          name: Restart frontend app
          command: ssh ${USER}@${HOST} 'source .profile && pm2 restart ${FRONTEND_APP_NAME}' 2>&1

workflows:
  version: 2
  deploy:
    jobs:
      - init-workspace
        # filters:
        #   branches:
        #     only: master
      - deploy-backend:
          requires:
            - init-workspace
          # filters:
          #   branches:
          #     only: master
      - deploy-frontend:
          requires:
            - deploy-backend
          filters:
            branches:
              only: master
